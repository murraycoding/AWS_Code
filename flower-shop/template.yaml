AWSTemplateFormatVersion: 2010-09-09
Description: >-
  flower-shop

Transform:
- AWS::Serverless-2016-10-31

# Resouces needed for the serverless cloud inventory system 
Resources:
  # Lambda functions
  flower_function:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/flowers.get_flower_information
      Runtime: python3.8
      MemorySize: 128
      Timeout: 100
      Description: A function to get the flower information for one or all of the flowers
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          INVENTORY_TABLE: !Ref inventory_table
      Events:
        flower_shop_api:
          Type: Api
          Properties:
            Path: /flower/{id}
            Method: GET
        flower_shop_api:
          Type: Api
          Properties:
            Path: /flowers
            Method: GET

  health_function:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/health/health_check
      Runtime: python3.8
      MemorySize: 128
      Timeout: 100
      Description: A function to check the status of the API - nothing should be returned exceot for a success message
      Events:
        flower_shop_api:
          Type: Api
          Properties:
            Path: /health
            Method: GET

   update_inventory_function:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/update_inventory/
      Runtime: Python 3.8
      MemorySize: 128
      Timeout: 100
      Description: A function to update the flower inventory in the DynamoDB table
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          INVENTORY_TABLE: !Ref inventory_table
          TRANSACTION_TABLE: !Ref transaction_table
      Events:
        flower_shop_api:
          Type: Api
          Properties:
            Path: /purchase
            Method: PUT
        flower_shop_api:
          Type: Api
          Properties:
            Path: /sale
            Method: PATCH

  # dyanmodb tables
  inventory_table:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String

  transaction_table:
    Type: AWS::Serverless::SimpleTable
    Properites:
      PrimaryKey:
        Name: transaction_id
        Type: String

  # API information
  flower_shop_api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod

  # Connectors
  flowerFunction_to_inventoryTable_Connector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: flower_function
      Destination:
        Id: inventory_table
      Permissions:
        - Read

  transactionFunction_to_inventoryTable_Connector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: transaction_function
      Destination:
        Id: inventory_table
      Permissions:
        - Read
        - Write

  transactionFunction_to_transactionTable_Connector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: transaction_function
      Destination:
        Id: transaction_table
      Permissions:
        - Write

  getAllItemsFunctionToTableConnector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: getAllItemsFunction
      Destination:
        Id: InventoryTable
      Permissions:
        - Read

  getByIdFunctionToTableConnector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: getByIdFunction
      Destination:
        Id: InventoryTable
      Permissions:
        - Read

  putItemFunctionToTableConnector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: putItemFunction
      Destination:
        Id: InventoryTable
      Permissions:
        - Write

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-all-items.js
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get_all_items.getAllItemsHandler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          INVENTORY_TABLE: !Ref InventoryTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-by-id.js
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get_by_id.getByIdHandler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          INVENTORY_TABLE: !Ref InventoryTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put_item.putItemHandler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          INVENTORY_TABLE: !Ref InventoryTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST
  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  InventoryTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
