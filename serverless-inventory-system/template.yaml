AWSTemplateFormatVersion: 2010-09-09
Description: >-
  flower-shop

Transform:
- AWS::Serverless-2016-10-31

# Resouces needed for the serverless cloud inventory system 
Resources:
  # Lambda functions
  flowerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/flowers.get_flower_information
      Runtime: python3.8
      MemorySize: 128
      Timeout: 100
      Description: A function to get the flower information for one or all of the flowers
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          INVENTORY_TABLE: !Ref inventoryTable
      Events:
        singleFlowerInfo:
          Type: Api
          Properties:
            Path: /flower # the flower id will be passed in as a query string param
            Method: GET
            RestApiId:
              Ref: flowerShopApi
        allFlowerInfo:
          Type: Api
          Properties:
            Path: /flowers
            Method: GET
            RestApiId:
              Ref: flowerShopApi

  healthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/health/health_check
      Runtime: python3.8
      MemorySize: 128
      Timeout: 100
      Description: A function to check the status of the API - nothing should be returned exceot for a success message
      Events:
        healthCheck:
          Type: Api
          Properties:
            Path: /health
            Method: GET
            RestApiId:
              Ref: flowerShopApi

  updateInventoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/update_inventory/flower_transaction_func
      Runtime: python3.8
      MemorySize: 128
      Timeout: 100
      Description: A function to update the flower inventory in the DynamoDB table
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          INVENTORY_TABLE: !Ref inventoryTable
          TRANSACTION_TABLE: !Ref transactionTable
      Events:
        purchaseRequest:
          Type: Api
          Properties:
            Path: /purchase
            Method: PUT
            RestApiId:
              flowerShopApi
        saleRequest:
          Type: Api
          Properties:ÃŸ
            Path: /sale
            Method: PATCH
            RestApiId:
              flowerShopApi

  # dyanmodb tables
  inventoryTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: flower_id
        Type: String

  transactionTable:
    Type: AWS::Serverless::SimpleTable
    Properites:
      PrimaryKey:
        Name: transactionId
        Type: String

  # API information
  flowerShopApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod

  # Connectors
  flowerFunctionToInventoryTableConnector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: flowerFunction
      Destination:
        Id: inventoryTable
      Permissions:
        - Read

  updateInventoryFunctionToInventoryTableConnector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: updateInventoryFunction
      Destination:
        Id: inventoryTable
      Permissions:
        - Read
        - Write

  updateInventoryFunctionToTransactionTableConnector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: updateInventoryFunction
      Destination:
        Id: transactionTable
      Permissions:
        - Write
